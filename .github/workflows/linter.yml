---
###########################
###########################
## Linter GitHub Actions ##
###########################
###########################
name: Lint Code Base

#
# Documentation:
# https://help.github.com/en/articles/workflow-syntax-for-github-actions
#

#############################
# Start the job on all push #
#############################
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

###############
# Set the Job #
###############
jobs:
  build:
    # Name the Job
    name: Lint Code Base
    # Set the agent to run on
    runs-on: ubuntu-latest

    ###################
    # Python versions #
    ###################
    strategy:
      matrix:
        python-version: [3]
    
    ##################
    # Load all steps #
    ##################
    steps:

      ##########################
      # Checkout the code base #
      ##########################
      - name: Checkout Code
        uses: actions/checkout@master

      #########################
      # Pick a Python version #
      #########################
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      ##############################
      # Set up a Python virtualenv #
      ##############################
      - name: Set up Python virtual environment
        run: |
          # Create a virtualenv
          python -m venv python${{ matrix.python-version }}-venv
          # Activate virtualenv
          source python${{ matrix.python-version }}-venv/bin/activate

      ########################
      # Install dependencies #
      ########################
      - name: Install dependencies
        run: |          
          # Activate virtualenv
          source python${{ matrix.python-version }}-venv/bin/activate
          # Install dependencies required by NetfilterQueue
          sudo apt-get install build-essential python-dev libnetfilter-queue-dev
          # Upgrade pip
          python -m pip install --upgrade pip
          # Install linters and other python modules
          pip install pylint pycodestyle flake8 black mypy isort setuptools wheel pytest

      ##############################
      # Install data-plane modules #
      ##############################
      - name: Install data-plane modules
        run: |
          # Activate virtualenv
          source python${{ matrix.python-version }}-venv/bin/activate
          # Setup data-plane modules
          python setup.py install

      ################################
      # Run Linter against code base #
      ################################
      - name: Python Code Quality and Lint
        run: |
          # Activate virtualenv
          source python${{ matrix.python-version }}-venv/bin/activate
          # Module to be tested
          module=data_plane
          # pylint
          echo Running: pylint $module
          pylint $module
          if [ "$?" = "0" ]; then echo "Pylint ok"; else echo "Pylint error"; exit $exit_code; fi
          # pycodestyle
          echo Running: pycodestyle $module
          pycodestyle $module
          if [ "$?" = "0" ]; then echo "pycodestyle ok"; else echo "pycodestyle error"; exit $exit_code; fi
          # flake8
          echo Running: flake8 $module
          flake8 $module
          if [ "$?" = "0" ]; then echo "Flake8 ok"; else echo "Flake8 error"; exit $exit_code; fi
          # black
          echo Running: black --check $module
          black --check $module
          if [ "$?" = "0" ]; then echo "Black ok"; else echo "Black error"; exit $exit_code; fi
          # mypy
          # echo Running: mypy $module
          # mypy $module
          # if [ "$?" = "0" ]; then echo "mypy ok"; else echo "mypy error"; exit $exit_code; fi
          # isort
          echo Running: isort -rc $module -c --diff
          isort -rc $module -c --diff
          if [ "$?" = "0" ]; then echo "isort ok"; else echo "isort error"; exit $exit_code; fi
