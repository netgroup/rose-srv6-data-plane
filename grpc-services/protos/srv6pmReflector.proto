syntax = "proto3";
package srv6pm;
import "srv6pmCommons.proto";

service SRv6PMReflector {
    // start an experiment
    rpc startExperiment (StartExperimentReflectorRequest) returns (StartExperimentReflectorReply) {}
    // stop am experiment
    rpc stopExperiment (StopExperimentRequest) returns (StopExperimentReply) {}
    // retrive data of an experiment
    rpc retriveExperimentResults (RetriveExperimentDataRequest) returns (ExperimentDataResponse) {}
    // Tunnel
    rpc CreateSRv6TunnelReflector (SRv6EPRequestReflector) returns (SRv6EPReplyReflector) {}

}

// The SRv6EPRequest message containing a number of paths.
message SRv6EPRequestReflector {
    string prefix= 1;
    string encapmode = 2;
    string segments = 3;
    string device = 4;
}

// The SRv6EPReply message containing a simple status message
message SRv6EPReplyReflector {
    StatusCode status = 200;
}

message StartExperimentReflectorRequest {
    string measure_id = 1;
    string sdlist = 1;
    string sdlistreverse = 1;
    ReflectorOptions reflector_options = 2;
    ColorOptions color_options = 3;
}

message StartExperimentReflectorReply {
    StatusCode status = 1;
}

message ReflectorOptions {
    uint32 ss_udp_port = 1;
    uint32 refl_udp_port = 1;
    MesurementProtocol mesurement_protocol = 1;
    AuthenticationMode authentication_mode = 3;
    MesurementType mesurement_type = 4;
    MesurementLossMode mesurement_loss_mode = 8;
}
